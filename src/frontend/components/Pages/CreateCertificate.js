import { useState } from "react";
import { Form, Navigate, redirect, useActionData } from "react-router-dom";

const CreateCertificate = () => {
    // ex. simulate the uth system
    const [user, setUser] = useState('mario');

    const data = useActionData();

    if (!user) {
        return <Navigate to="/" replace={true} />
    }

    return(
        <div className="create">
            <h2>Creat Certificate</h2>

            {/* simulates usser login out */}
            {/* <button onClick={() => setUser(null)}>Logout</button> */}

            <Form method="post" action="/createcertificate">
                
                {/* --- issuers  --- */}
                <label>
                    <span>Issuer: </span>
                    <input type="text" name="issuer-name" placeholder="name"/>
                    <input type="text" name="issuer-type" placeholder="issuer type"/>
                    <input type="text" name="issuer-adress" placeholder="eth adress"/>
                    <input type="text" name="issuer-signature" placeholder="signature"/>
                </label>

                {/* --- parameters --- */}

                {/* image */}
                <label>
                    <span>Image: </span>
                    {/* <input type="file" name="image" accept="image/*"/> */}
                    <input type="text" name="image" placeholder="img url"/>
                </label>

                {/* title */}
                <label>
                    <span>Work Title</span>
                    <input 
                        type="text" 
                        required
                        name="title"
                    />
                </label>

                {/* artist */}
                <label>
                    <span>Artist:</span>
                    <input 
                        type="text"
                        required
                        name="artist"
                    />
                </label>

                {/* date */}
                <label>
                    <span>Date: </span>
                    <input type="datetime-location" name="date" />
                </label>

                {/* dimentions */}
                <label>
                    <span>Dimentions: </span>
                    <input type="number" name="dimention-length" min="0" step="2" placeholder="length"/>
                    <input type="number" name="dimention-heigth" min="0" step="2" placeholder="height"/>
                    <select 
                        required
                        name="dimention-unit"
                    >
                        <option value="centimeter">cm</option>
                        <option value="meter">m</option>
                    </select>
                </label>

                {/* medium */}
                <label>
                    <span>Medium:</span>
                    <input 
                        type="text"
                        required
                        name="medium"
                    />
                </label>

                {/* eddition */}
                <label>
                    <span>Eddition: </span>
                    <input type="text" name="edition-type" placeholder="type" />
                </label>

                {/* statement */}
                <label>
                    <span>Statement of Authenticity:</span>
                    <textarea 
                        required
                        name="statement"
                    ></textarea>
                </label>

                {/* contract selection */}
                <label>
                    <span>Contract:</span>
                    <select 
                        required
                        name="contract"
                    >
                        <option value="ERC721ACoA">ERC721ACoA</option>
                        <option value="CostumACOA">Costum Certificate</option>
                    </select>
                </label>
                {/* --- information automaticly generated by the erc721 on opload --- */}
                <label>
                    <span>Token Id</span>
                    <input 
                        type="text"  
                        required
                        name="tokenId"    
                    />
                </label>

                <label>
                    <span>Token URI</span>
                    <input 
                        type="text"  
                        required
                        name="tokenURI"    
                    />
                </label>
                
                <button>Creat</button>
            </Form>

            {data && data.error && <p>{data.error}</p>}
        </div>
    );
}

export default CreateCertificate;

export const certificateAction = async ({ request }) => {  
    const data = await request.formData();
  
    const submission = {
        metadata:{
            title: data.get('title'),
            type: "coa",
            properties: {
                artist: data.get('artist'),
                title: data.get('title'),
                date: data.get('date'),
                dimentions:{
                    length: data.get('dimention-length'),
                    height: data.get('dimention-heigth'),
                    unit: data.get('dimention-unit'),
                },
                medium: data.get('medium'),
                edition:{
                    type: data.get('edition-type')
                },
                statement: data.get('statement'),
                image: "ipfs://..."
            },
            issuer:{
                name: data.get('issuer-name'),
                type: data.get('issuer-type'),
                adress: data.get('issuer-adress'),
                signature: data.get('issuer-signature')
            }
        },
        contract: data.get('contract'),
        token:{
            tokenId: data.get('tokenId'),
            tokenURI: data.get('tokenURI')
        }
    }
  
    // send post request - ex. simulated in front end
    await fetch('http://localhost:8000/certificates', {
        method: 'POST',
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(submission)
    }).then(() => {
        console.log('new certificate added');
    });
    
    if (submission.artist <= 0){
      return {error: 'Must include an artist'}
    }
  
    // redirect the user
    return redirect('/')
  }